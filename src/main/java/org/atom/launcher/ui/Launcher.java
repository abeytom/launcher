/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.atom.launcher.ui;

import org.apache.log4j.Logger;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.*;
import java.util.Properties;

import static javax.swing.KeyStroke.getKeyStroke;

/**
 * @author abey.tom
 */
public class Launcher extends javax.swing.JDialog {

    public static final Logger LOGGER;
    public static final String ESCAPE_STR = "com.appdynamics.launcher:ESCAPE";
    public static final String ENTER_STR = "com.appdynamics.launcher:ENTER_PRESSED";
    public static final String PREF_STR = "com.appdynamics.launcher:PREF_PRESSED";
    public static final String FILE_COMMAND_PROP = "command.properties";
    public static final String FILE_PATH_PROP = "path.properties";
    private Properties commands;
    private Properties paths;

    static {
        File logDir = new File(System.getProperty("user.home"), "cstools/launcher");
        System.out.println("Initialized the working directory to " + logDir.getAbsolutePath());
        System.setProperty("LOG_HOME", logDir.getAbsolutePath());
        LOGGER = Logger.getLogger(Launcher.class);
        Properties properties = System.getProperties();
        LOGGER.info("The java version is " + properties.getProperty("java.runtime.version"));
        LOGGER.info("The jvm is " + properties.getProperty("java.vm.name"));
        LOGGER.info("The java.home is " + properties.getProperty("java.home"));
    }

    /**
     * Creates new form Launch
     */
    public Launcher(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        addListeners();
        loadProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commandCB = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Launcher");
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        commandCB.setEditable(true);
        commandCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandCBActionPerformed(evt);
            }
        });
        commandCB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                commandCBKeyTyped(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(commandCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, commandCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void commandCBActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_commandCBActionPerformed
        String selectedItem = (String) commandCB.getSelectedItem();
        if (selectedItem != null && !selectedItem.isEmpty()) {
            executeCommand(selectedItem);
        }
    }// GEN-LAST:event_commandCBActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_formKeyTyped
        System.exit(0);
    }// GEN-LAST:event_formKeyTyped

    private void commandCBKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_commandCBKeyTyped
        System.out.println(evt.getKeyCode());
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            System.exit(0);
        }
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            String selectedItem = (String) commandCB.getSelectedItem();
//            if(selectedItem!=null && !selectedItem.isEmpty()){
//                executeCommand(selectedItem);
//            }
//        }
    }// GEN-LAST:event_commandCBKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {

        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
            public void uncaughtException(Thread t, Throwable e) {
                LOGGER.error("Uncaught Exception ", e);
            }
        });
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        final Launcher dialog = new Launcher(new javax.swing.JFrame(), true);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
            }
        });

    }

    private void addListeners() {
        JRootPane root = getRootPane();
        //Escape Key
        KeyStroke escape = getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        root.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escape,
                ESCAPE_STR);
        root.getActionMap().put(ESCAPE_STR, new EscapeAction());
        //Enter Key
        KeyStroke enter = getKeyStroke(KeyEvent.VK_ENTER, getToolkit().getMenuShortcutKeyMask());
        root.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(enter,
                ENTER_STR);
//        root.getActionMap().put(ENTER_STR, new EnterAction());
        //Preferences
        KeyStroke pref = getKeyStroke(KeyEvent.VK_COMMA, getToolkit().getMenuShortcutKeyMask());
        root.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(pref,
                PREF_STR);
        root.getActionMap().put(PREF_STR, new PreferenceAction());
        //Window Listener
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
    }

    private void loadProperties() {
        File homeDir = getApplicationHomeDir();
        File cmdPropFile = new File(homeDir, FILE_COMMAND_PROP);
        if (!cmdPropFile.exists()) {
            copyFile(cmdPropFile, "/command.properties");
        }
        commands = loadPropertyFile(cmdPropFile);
        File pathPropFile = new File(homeDir, FILE_PATH_PROP);
        if (!pathPropFile.exists()) {
            copyFile(pathPropFile, "/path.properties");
        }
        paths = loadPropertyFile(pathPropFile);
    }

    private void copyFile(File target, String classPathUrl) {
        InputStream in = getClass().getResourceAsStream(classPathUrl);
        try {
            FileOutputStream fos = new FileOutputStream(target);
            byte[] b = new byte[1024];
            int len;
            while ((len = in.read(b)) != -1) {
                fos.write(b, 0, len);
            }
            fos.flush();
            fos.close();
            in.close();
        } catch (IOException e) {
            LOGGER.error("Cannot write file " + target.getAbsolutePath(), e);
        }
    }

    private Properties loadPropertyFile(File prop) {
        Properties properties = new Properties();
        try {
            properties.load(new FileReader(prop));
        } catch (IOException e) {
            LOGGER.error("Error while loading the prop file " + prop.getAbsolutePath(), e);
        }
        return properties;
    }

    public static File getApplicationHomeDir() {
        String home = System.getProperty("user.home");
        File dir = new File(home, ".launcher");
        dir.mkdirs();
        return dir;
    }

    private class EnterAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = (String) commandCB.getSelectedItem();
            executeCommand(command);
            LOGGER.info("The text is " + command + " and source is " + e.getSource());
            // dispatchEvent(new WindowEvent(Launcher.this,
            // WindowEvent.WINDOW_CLOSING));
        }
    }

    private class EscapeAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            dispatchEvent(new WindowEvent(Launcher.this,
                    WindowEvent.WINDOW_CLOSING));
        }
    }

    public class PreferenceAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            Editor editor = new Editor(commands, paths);
            editor.setLocationRelativeTo(null);
            editor.setVisible(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox commandCB;
    // End of variables declaration//GEN-END:variables

    public void executeCommand(String command) {
        if (command == null || command.trim().isEmpty()) {
            LOGGER.error("The command is empty");
            return;
        }
        String[] split = command.split(" ");
        String cmdShort;
        String alias;
        if (split.length == 1) {
            cmdShort = "default";
            alias = split[0];
        } else {
            cmdShort = split[0];
            alias = split[1];
        }
        Runtime runtime = Runtime.getRuntime();
        String cmd = commands.getProperty(cmdShort);
        String args = paths.getProperty(alias);
        if (args == null) {
            if (new File(alias).exists()) {
                args = alias;
            } else {
                return;
            }
        }
        args = adjustPathIfNeeded(args, split);
        exec(runtime, cmd, args);
    }

    private String adjustPathIfNeeded(String args, String[] split) {
        File dir = new File(args);
        if (dir.isDirectory() && split.length > 2) {
            String path = split[2];
            String[] subs = dir.list();
            if (subs != null) {
                for (String sub : subs) {
                    if(sub.replaceAll("\\W", "").contains(path)){
                        File file = new File(dir, sub);
                        if(file.isDirectory()){
                            return file.getAbsolutePath();
                        }
                    }
                }
            }
        }
        return args;
    }

    private void exec(Runtime runtime, String cmd, String args) {
        String command = cmd + " " + args;
        LOGGER.info("Executing the command [" + command + "]");
        try {
            runtime.exec(command);
        } catch (Exception e) {
            LOGGER.error("Exception while executing the command " + command, e);
        }
    }
}
